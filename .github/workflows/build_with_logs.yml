name: Build App & Plugins (macOS) with Logs

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  app:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      # Show which Xcodes exist, then pick newest
      - name: Select newest installed Xcode
        run: |
          set -euo pipefail
          echo "Available Xcodes:"
          ls /Applications | grep -E '^Xcode' || true
          for CAND in /Applications/Xcode_16.4.app /Applications/Xcode_16*.app /Applications/Xcode.app; do
            if [ -d "$CAND" ]; then
              echo "Selecting $CAND"
              sudo xcode-select -s "$CAND"
              break
            fi
          done
          echo "Using:"; xcodebuild -version; sw_vers; swift --version

      # Guard: never allow raw swiftc routes to sneak in
      - name: Guard against raw swiftc usage
        run: |
          set -euo pipefail
          if [ -f build_part4_swift.sh ]; then
            echo "❌ build_part4_swift.sh still present — remove it (git rm)."; exit 1
          fi
          BAD=$(grep -RIn --exclude-dir=.git --exclude-dir=plugin --include="*.sh" -E '^[[:space:]]*swiftc\b' || true)
          if [ -n "$BAD" ]; then
            echo "❌ Found real swiftc calls in scripts:"; echo "$BAD"; exit 1
          fi

      # Build App with xcodebuild; fallback to target when no schemes found
      - name: Build App (auto-recover project format)
        run: |
          set -euo pipefail
          mkdir -p ci_logs app/build

          # Detect project file
          PROJ=""
          if [ -f app/MoreMojoStudio.xcodeproj/project.pbxproj ]; then PROJ="app/MoreMojoStudio.xcodeproj"; fi
          if [ -f app/RealFeelStudio.xcodeproj/project.pbxproj ]; then PROJ="app/RealFeelStudio.xcodeproj"; fi
          if [ -z "$PROJ" ]; then echo "❌ No .xcodeproj found under app/"; exit 74; fi
          echo "Using project: $PROJ" | tee ci_logs/app_preflight.txt

          # Preflight: list (and JSON) to detect schemes/targets
          echo "=== xcodebuild -list ===" >> ci_logs/app_preflight.txt
          xcodebuild -project "$PROJ" -list >> ci_logs/app_preflight.txt 2>&1 || true

          echo "=== xcodebuild -list -json ===" >> ci_logs/app_preflight.txt
          xcodebuild -project "$PROJ" -list -json > ci_logs/app_list.json 2>> ci_logs/app_preflight.txt || true

          SCHEME=$(python3 - <<'PY'
          import json,sys
          try:
            d=json.load(open("ci_logs/app_list.json"))
            sch=d.get("project",{}).get("schemes",[]) or []
            # pick first non-empty scheme
            print(next((s for s in sch if str(s).strip()), ""))
          except Exception as e:
            print("")
          PY
          )

          TARGET=$(python3 - <<'PY'
          import json,sys
          try:
            d=json.load(open("ci_logs/app_list.json"))
            tg=d.get("project",{}).get("targets",[]) or []
            print(next((t for t in tg if str(t).strip()), ""))
          except Exception:
            print("")
          PY
          )

          # If project format is too new, regenerate with XcodeGen
          if grep -qi "future Xcode project file format" ci_logs/app_preflight.txt; then
            echo "Project format too new; regenerating with XcodeGen…" | tee -a ci_logs/app_preflight.txt
            which xcodegen >/dev/null 2>&1 || (brew update || true; brew install xcodegen)
            if [ -f app/project.yml ]; then
              (cd app && xcodegen generate)
              # Re-list after regeneration
              xcodebuild -project "$PROJ" -list -json > ci_logs/app_list.json 2>> ci_logs/app_preflight.txt || true
              SCHEME=$(python3 - <<'PY'
          import json; d=json.load(open("ci_logs/app_list.json")); sch=d.get("project",{}).get("schemes",[]) or []
          print(next((s for s in sch if str(s).strip()), ""))
          PY
          )
              TARGET=$(python3 - <<'PY'
          import json; d=json.load(open("ci_logs/app_list.json")); tg=d.get("project",{}).get("targets",[]) or []
          print(next((t for t in tg if str(t).strip()), ""))
          PY
          )
            else
              echo "⚠️ app/project.yml not found; will build by target if possible." | tee -a ci_logs/app_preflight.txt
            fi
          fi

          echo "Detected SCHEME='${SCHEME}' TARGET='${TARGET}'" | tee -a ci_logs/app_preflight.txt

          echo "=== Building (Release) ===" | tee ci_logs/xcodebuild_app_stdout.log
          if [ -n "$SCHEME" ]; then
            echo "→ Building by scheme: $SCHEME" | tee -a ci_logs/xcodebuild_app_stdout.log
            xcodebuild \
              -project "$PROJ" \
              -scheme "$SCHEME" \
              -configuration Release \
              -sdk macosx \
              -destination 'platform=macOS' \
              -derivedDataPath app/build \
              -resultBundlePath app/build/App.xcresult \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO DEVELOPMENT_TEAM="" \
              build 2>&1 | tee -a ci_logs/xcodebuild_app_stdout.log
          elif [ -n "$TARGET" ]; then
            echo "→ No schemes found; building by target: $TARGET" | tee -a ci_logs/xcodebuild_app_stdout.log
            xcodebuild \
              -project "$PROJ" \
              -target "$TARGET" \
              -configuration Release \
              -sdk macosx \
              -destination 'platform=macOS' \
              -derivedDataPath app/build \
              -resultBundlePath app/build/App.xcresult \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO DEVELOPMENT_TEAM="" \
              build 2>&1 | tee -a ci_logs/xcodebuild_app_stdout.log
          else
            echo "❌ No schemes and no targets detected; cannot build." | tee -a ci_logs/xcodebuild_app_stdout.log
            exit 74
          fi

      - name: Upload App logs & xcresult (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-build-logs
          path: |
            ci_logs/**
            app/build/Build/Logs/**
            app/build/App.xcresult/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload App bundle (if built)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: AppBundle
          path: app/build/Build/Products/Release/**/*.app
          if-no-files-found: warn
          retention-days: 7

      - name: Tail app log (on failure)
        if: failure()
        run: |
          echo "----- Tail of app build log -----"
          tail -n 200 ci_logs/xcodebuild_app_stdout.log || true
          echo "----- Preflight -----"
          tail -n 120 ci_logs/app_preflight.txt || true

  plugin:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Fetch JUCE
        run: |
          set -euo pipefail
          git clone --depth=1 https://github.com/juce-framework/JUCE.git || true
          export JUCE_DIR="$PWD/JUCE"
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV
          echo "JUCE_DIR is $JUCE_DIR"

      - name: Clean CMake cache
        run: rm -rf plugin/build

      - name: Guard CMake for forbidden commands
        run: |
          set -euo pipefail
          if grep -RIn '\$<TARGET_BUNDLE_DIR:MoreMojoPlugin>' plugin/CMakeLists.txt; then
            echo "❌ Remove custom add_custom_command on base target; use COPY_PLUGIN_AFTER_BUILD only."
            exit 1
          fi

      - name: Configure (CMake) with logs
        env:
          JUCE_DIR: ${{ env.JUCE_DIR }}
        run: |
          set -euo pipefail
          mkdir -p ci_logs
          echo "Configuring with JUCE_DIR=$JUCE_DIR"
          cmake -B plugin/build -S plugin -DJUCE_DIR="$JUCE_DIR" 2>&1 | tee ci_logs/cmake_configure.log

      - name: Build (Release) with logs
        run: |
          set -euo pipefail
          cmake --build plugin/build --config Release 2>&1 | tee ci_logs/cmake_build.log

      - name: Upload Plugin logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-logs
          path: |
            ci_logs/**
            plugin/build/**/CMakeCache.txt
            plugin/build/**/CMakeFiles/CMakeOutput.log
            plugin/build/**/CMakeFiles/CMakeError.log
          if-no-files-found: warn
          retention-days: 7

      - name: Upload installed plugin bundles (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: PluginBundles
          path: |
            ~/Library/Audio/Plug-Ins/Components/*.component
            ~/Library/Audio/Plug-Ins/VST3/*.vst3
          if-no-files-found: warn
          retention-days: 7

      - name: Tail plugin logs (on failure)
        if: failure()
        run: |
          echo "----- Tail of CMake configure -----"
          tail -n 200 ci_logs/cmake_configure.log || true
          echo "----- Tail of CMake build -----"
          tail -n 200 ci_logs/cmake_build.log || true

  autofix:
    if: ${{ always() && (needs.app.result == 'failure' || needs.plugin.result == 'failure') }}
    runs-on: macos-14
    needs: [app, plugin]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Download logs from this run
        uses: actions/download-artifact@v4
        with:
          path: ./failed_artifacts

      - name: Run AgentHub
        run: |
          set -euo pipefail
          python3 scripts/swarm/agent_hub.py || echo "AgentHub exit non-zero — continuing"

      - name: Publish swarm summary
        if: always()
        run: |
          echo "## Swarm summary" >> $GITHUB_STEP_SUMMARY
          if [ -f swarm_summary.md ]; then
            cat swarm_summary.md >> $GITHUB_STEP_SUMMARY
            cat swarm_summary.md
          else
            echo "_No swarm_summary.md generated_" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Swarm diagnostic tails (app/plugin)
        if: always()
        run: |
          echo "=== app preflight ==="
          ls -R failed_artifacts/app-build-logs || true
          grep -RniE "future Xcode|Unable to read project|xcodebuild: error|Scheme .* not" failed_artifacts/app-build-logs || true
          echo "=== plugin cmake ==="
          ls -R failed_artifacts/plugin-build-logs || true
          grep -RniE "CMake Error|TARGET_BUNDLE_DIR|Could not find JUCE|No CMakeLists" failed_artifacts/plugin-build-logs || true

      - name: Show working tree status
        run: |
          echo "=== git status ==="; git status --porcelain=v1 || true
          echo "=== git diff (stat) ==="; git diff --stat || true

      - name: Check for changes
        id: diff
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            git add -A
          fi

      - name: Create PR with fixes
        if: steps.diff.outputs.changed == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Swarm Autofix: CI build cleanup"
          body: |
            Automated fixes after failed CI run.
            See swarm summary in the build job.
          branch: "swarm/autofix-${{ github.run_id }}"
          labels: "autofix"
          commit-message: "Swarm Autofix: CI build cleanup"

      - name: Log PR link
        if: steps.diff.outputs.changed == 'true'
        run: |
          echo "PR #:  ${{ steps.create_pr.outputs['pull-request-number'] }}"
          echo "PR URL: ${{ steps.create_pr.outputs['pull-request-url'] }}"
          echo "PR link created: ${{ steps.create_pr.outputs['pull-request-url'] }}" >> $GITHUB_STEP_SUMMARY
