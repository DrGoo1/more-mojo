name: Build App & Plugins (macOS) with Logs

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  app:
    runs-on: macos-14   # Apple Silicon with newer Xcodes available
    steps:
      - uses: actions/checkout@v4

      # Guard against raw swiftc usage
      - name: Guard against raw swiftc usage
        run: |
          set -euo pipefail
          if [ -f build_part4_swift.sh ]; then
            echo "❌ build_part4_swift.sh still present — remove it (git rm)."
            exit 1
          fi
          # Only match real commands, not comments:
          # ^[[:space:]]*swiftc\b  → line begins (ignoring whitespace) with 'swiftc'
          BAD=$(grep -RIn --exclude-dir=.git --exclude-dir=plugin --include="*.sh" -E '^[[:space:]]*swiftc\b' || true)
          if [ -n "$BAD" ]; then
            echo " Found real swiftc calls in scripts:"
            echo "$BAD"
            exit 1
          fi

      - name: Select newest installed Xcode
        run: |
          set -euo pipefail
          echo "Available Xcodes:"
          ls /Applications | grep -E '^Xcode' || true

          # Prefer Xcode 16.4 if installed, then 16.x, then fall back
          for CAND in /Applications/Xcode_16.4.app /Applications/Xcode_16*.app /Applications/Xcode.app; do
            if [ -d "$CAND" ]; then
              echo "Selecting $CAND"
              sudo xcode-select -s "$CAND"
              break
            fi
          done

          echo "Using:"
          xcodebuild -version
          sw_vers
          swift --version

      - name: Build App (auto-recover project format)
        run: |
          set -euo pipefail
          mkdir -p ci_logs app/build

          echo "=== xcodebuild -list (preflight) ===" | tee ci_logs/app_preflight.txt
          if ! xcodebuild -project app/MoreMojoStudio.xcodeproj -list >> ci_logs/app_preflight.txt 2>&1; then
            echo "xcodebuild -list failed, checking for format error…" | tee -a ci_logs/app_preflight.txt
            if grep -q "future Xcode project file format" ci_logs/app_preflight.txt || true; then
              echo "Project format too new for this runner; regenerating with XcodeGen…" | tee -a ci_logs/app_preflight.txt
              if ! command -v xcodegen >/dev/null 2>&1; then
                brew update || true
                brew install xcodegen
              fi
              if [ -f app/project.yml ]; then
                (cd app && xcodegen generate)
                echo "Regenerated .xcodeproj via XcodeGen" | tee -a ci_logs/app_preflight.txt
              else
                echo "ERROR: app/project.yml not found; cannot regenerate .xcodeproj" | tee -a ci_logs/app_preflight.txt
                exit 74
              fi
            else
              echo "xcodebuild -list failed for another reason:"
              tail -n 100 ci_logs/app_preflight.txt
              exit 74
            fi
          fi

          echo "=== Building (Release) ===" | tee ci_logs/xcodebuild_app_stdout.log
          xcodebuild \
            -project app/MoreMojoStudio.xcodeproj \
            -scheme "MoreMojoStudio" \
            -configuration Release \
            -sdk macosx \
            -destination 'platform=macOS' \
            -derivedDataPath app/build \
            -resultBundlePath app/build/App.xcresult \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO DEVELOPMENT_TEAM="" \
            build 2>&1 | tee -a ci_logs/xcodebuild_app_stdout.log

      - name: Upload App logs & xcresult (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-build-logs
          path: |
            ci_logs/**
            app/build/Build/Logs/**
            app/build/App.xcresult/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload App bundle (if built)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: MoreMojoStudio.app
          path: app/build/Build/Products/Release/MoreMojoStudio.app
          if-no-files-found: error
          retention-days: 7

      - name: Tail app log (on failure)
        if: failure()
        run: |
          echo "----- Tail of app build log -----"
          tail -n 200 ci_logs/xcodebuild_app_stdout.log || true
          echo "----- Preflight -----"
          tail -n 100 ci_logs/app_preflight.txt || true

  plugin:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      # List and select Xcode version
      - name: List and select Xcode version
        run: |
          set -e
          echo "=== Available Xcode Versions ==="
          ls -la /Applications/Xcode* || true
          echo "Current Xcode version:"
          xcodebuild -version || true
          
          # Try to select Xcode 16.x if available
          echo "Attempting to select Xcode 16.x..."
          if [ -d "/Applications/Xcode_16.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.4.app
          elif [ -d "/Applications/Xcode_16.0.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.0.app
          else
            echo "No Xcode 16.x found, will try to continue with current version"
          fi
          echo "Selected Xcode version:"
          xcodebuild -version
          
      - name: Fetch JUCE
        run: |
          set -euo pipefail
          git clone --depth=1 https://github.com/juce-framework/JUCE.git || true
          # export for THIS step:
          export JUCE_DIR="$PWD/JUCE"
          # export for NEXT steps:
          echo "JUCE_DIR=$JUCE_DIR" >> $GITHUB_ENV
          echo "JUCE_DIR is $JUCE_DIR"

      - name: Clean CMake cache
        run: rm -rf plugin/build

      - name: Guard CMake for forbidden commands
        run: |
          set -euo pipefail
          if grep -RIn '\$<TARGET_BUNDLE_DIR:MoreMojoPlugin>' plugin/CMakeLists.txt; then
            echo "❌ Remove custom add_custom_command on base target; use COPY_PLUGIN_AFTER_BUILD or per-format targets."
            exit 1
          fi

      - name: Configure (CMake) with logs
        env:
          JUCE_DIR: ${{ env.JUCE_DIR }}
        run: |
          set -euo pipefail
          mkdir -p ci_logs
          echo "Configuring with JUCE_DIR=$JUCE_DIR"
          cmake -B plugin/build -S plugin \
            -DJUCE_DIR="$JUCE_DIR" \
            -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0" \
            2>&1 | tee ci_logs/cmake_configure.log

      - name: Build (Release) with logs
        run: |
          set -euo pipefail
          cmake --build plugin/build --config Release 2>&1 | tee ci_logs/cmake_build.log

      - name: Upload Plugin logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-logs
          path: |
            ci_logs/**
            plugin/build/**/CMakeCache.txt
            plugin/build/**/CMakeFiles/CMakeOutput.log
            plugin/build/**/CMakeFiles/CMakeError.log
          if-no-files-found: warn
          retention-days: 7

      # JUCE will install bundles into user paths (COPY_PLUGIN_AFTER_BUILD TRUE)
      - name: Upload installed plugin bundles (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: MoreMojoPlugin-bundles
          path: |
            ~/Library/Audio/Plug-Ins/Components/MoreMojoPlugin.component
            ~/Library/Audio/Plug-Ins/VST3/MoreMojoPlugin.vst3
          if-no-files-found: warn
          retention-days: 7

      - name: Tail plugin logs (on failure)
        if: failure()
        run: |
          echo "----- Tail of CMake configure -----"
          tail -n 200 ci_logs/cmake_configure.log || true
          echo "----- Tail of CMake build -----"
          tail -n 200 ci_logs/cmake_build.log || true
