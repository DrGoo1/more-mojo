name: Build Plugin Phase 2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-plugin:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Pull JUCE
      run: |
        git clone --depth=1 https://github.com/juce-framework/JUCE.git
        echo "JUCE_DIR=$PWD/JUCE" >> $GITHUB_ENV
        # Verify JUCE was cloned properly
        ls -la "$PWD/JUCE"
        echo "JUCE directory: $PWD/JUCE"
        
    - name: Guard against stale custom bundle commands
      run: |
        set -euo pipefail
        if git grep -n "TARGET_BUNDLE_DIR" -- plugin | grep -v '^$'; then
          echo "❌ Found TARGET_BUNDLE_DIR references; remove custom post-build blocks."
          exit 1
        fi
        echo "✅ No problematic TARGET_BUNDLE_DIR references found."
      
    - name: Build Plugin
      run: |
        # Clean build directory to avoid cached generator expressions
        rm -rf plugin/build
        
        # Define JUCE path explicitly
        JUCE_PATH="$PWD/JUCE"
        echo "Using JUCE at: $JUCE_PATH"
        
        # Verify JUCE directory exists
        if [ ! -d "$JUCE_PATH" ]; then
          echo "❌ JUCE directory not found: $JUCE_PATH"
          exit 1
        fi
        
        # Run CMake directly instead of through script
        echo "==> Configuring CMake"
        mkdir -p ci_logs
        cmake -B plugin/build -S plugin -DJUCE_DIR="$JUCE_PATH" -DPHASE=2 | tee ci_logs/cmake_stdout.log
        
        echo "==> Building (Release)"
        cmake --build plugin/build --config Release | tee ci_logs/build_stdout.log
        
        echo "==> Build complete"
        find plugin/build -name "*.component" -o -name "*.vst3"
        
    - name: Show first hard error
      if: failure()
      run: |
        set -e
        if [ -f ci_logs/xcodebuild_app_stdout.log ]; then
          echo "---- first 60 lines ----"; head -n 60 ci_logs/xcodebuild_app_stdout.log || true
          echo "---- last 120 lines ----"; tail -n 120 ci_logs/xcodebuild_app_stdout.log || true
        fi
        if [ -d plugin/build ]; then
          echo "---- CMakeCache.txt (top) ----"
          head -n 80 plugin/build/CMakeCache.txt || true
        fi
        if [ -f ci_logs/cmake_stdout.log ]; then
          echo "---- CMake output ----"
          cat ci_logs/cmake_stdout.log || true
        fi
        if [ -f ci_logs/build_stdout.log ]; then
          echo "---- Build output (last 100 lines) ----"
          tail -n 100 ci_logs/build_stdout.log || true
        fi
    
    - name: Package Plugins
      run: |
        mkdir -p dist
        
        # Find plugin bundles in standard JUCE output locations
        # First try macOS build structure
        if [ -d "plugin/build/MoreMojoPlugin_artefacts" ]; then
          find "plugin/build/MoreMojoPlugin_artefacts" -type d -name "*.component" -exec cp -R {} dist/ \;
          find "plugin/build/MoreMojoPlugin_artefacts" -type d -name "*.vst3" -exec cp -R {} dist/ \;
          find "plugin/build/MoreMojoPlugin_artefacts" -type d -name "*.app" -exec cp -R {} dist/ \;
        fi
        
        # Fallback to Release directory
        find "plugin/build" -path "*/Release/*.component" -exec cp -R {} dist/ \; || true
        find "plugin/build" -path "*/Release/*.vst3" -exec cp -R {} dist/ \; || true
        
        # If user plugin folder has content, try that too (files may exist if COPY_PLUGIN_AFTER_BUILD worked)
        COMPONENT_DIR="$HOME/Library/Audio/Plug-Ins/Components/MoreMojoPlugin.component"
        VST3_DIR="$HOME/Library/Audio/Plug-Ins/VST3/MoreMojoPlugin.vst3"
        
        if [ -d "$COMPONENT_DIR" ]; then
          cp -R "$COMPONENT_DIR" dist/
          echo "Found AU component in user plugin folder"
        fi
        
        if [ -d "$VST3_DIR" ]; then
          cp -R "$VST3_DIR" dist/
          echo "Found VST3 plugin in user plugin folder"
        fi
        
        # Show what we found
        echo "Found plugin artifacts:"
        find dist -type d -maxdepth 1
        
        # Archive component and vst3 separately for easier extraction
        cd dist
        find . -type d -name "*.component" | while read -r comp; do
          zip -r MoreMojo_AU.zip "$comp"
        done
        
        find . -type d -name "*.vst3" | while read -r vst; do
          zip -r MoreMojo_VST3.zip "$vst"
        done
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MoreMojo-Plugins
        path: dist
        if-no-files-found: error
        retention-days: 7
        
    # Slack notification for build status
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,workflow
        text: "Plugin build ${{ github.workflow }} completed with status: ${{ job.status }}\nSee details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Package source tree (without .git)
      if: always()
      run: |
        set -euo pipefail
        mkdir -p source_bundle
        rsync -a \
          --exclude='.git' \
          --exclude='**/build' \
          --exclude='**/.DS_Store' \
          --exclude='**/*.xcworkspace' \
          --exclude='**/DerivedData' \
          ./ ./source_bundle/

        # Create a single archive for convenience
        tar -czf source_bundle.tar.gz -C source_bundle .

    - name: Upload source bundle
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: source-bundle
        path: source_bundle.tar.gz
        if-no-files-found: error
        retention-days: 7
